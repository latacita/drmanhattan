package servidor;

import java.io.IOException;
import java.util.Date;
import java.util.logging.FileHandler;
import java.util.logging.Formatter;
import java.util.logging.Handler;
import java.util.logging.Level;
import java.util.logging.LogRecord;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;

public class PRUEBALOG {

	public static void main(String args[]){


		Logger logger = Logger.getLogger("MyLog");
		FileHandler fh;


		// This block configure the logger with handler and formatter
		try {
			fh = new FileHandler("c:\\MyLogFile.log", true);
			logger.addHandler(fh);
			logger.setLevel(Level.ALL);
			MyHtmlFormatter formatter = new MyHtmlFormatter();
			
			fh.setFormatter(formatter);

			// the following statement is used to log any messages   
			logger.log(Level.WARNING,"My first log");
			
			logger.log(Level.WARNING,"My 2 log");

		} catch (SecurityException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	
	// This custom formatter formats parts of a log record to a single line
	static class MyHtmlFormatter extends Formatter {
	    // This method is called for every log records
	    public String format(LogRecord rec) {
	    	
	    	String mensaje;
	    	
	        StringBuffer buf = new StringBuffer(1000);
	        // Bold any levels >= WARNING
	        if (rec.getLevel().intValue() >= Level.WARNING.intValue()) {
	            buf.append("<b>");
	            buf.append(rec.getLevel());
	            buf.append("</b>");
	        } else {
	            buf.append(rec.getLevel());
	        }
	        buf.append(' ');
	        buf.append(rec.getMillis());
	        buf.append(' ');
	        buf.append(formatMessage(rec));
	        buf.append('\n');
	        return buf.toString();
	    }

	    // This method is called just after the handler using this
	    // formatter is created
	    public String getHead(Handler h) {
	       // return "<HTML><HEAD>"+(new Date())+"</HEAD><BODY><PRE>\n";
	    	return new Date().toString()+" EDA ";
	    }

	    // This method is called just after the handler using this
	    // formatter is closed
	    public String getTail(Handler h) {
	        return "</PRE></BODY></HTML>\n";
	    }
	}

}